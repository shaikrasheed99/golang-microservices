// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	requests "github.com/shaikrasheed99/broker-service/app/models/requests"
	mock "github.com/stretchr/testify/mock"
)

// IBrokerService is an autogenerated mock type for the IBrokerService type
type IBrokerService struct {
	mock.Mock
}

// HandleAuthLogin provides a mock function with given fields: _a0
func (_m *IBrokerService) HandleAuthLogin(_a0 *requests.AuthLoginPayload) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*requests.AuthLoginPayload) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*requests.AuthLoginPayload) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*requests.AuthLoginPayload) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleAuthSignup provides a mock function with given fields: _a0
func (_m *IBrokerService) HandleAuthSignup(_a0 *requests.AuthSignupPayload) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*requests.AuthSignupPayload) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*requests.AuthSignupPayload) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*requests.AuthSignupPayload) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIBrokerService creates a new instance of IBrokerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBrokerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IBrokerService {
	mock := &IBrokerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
